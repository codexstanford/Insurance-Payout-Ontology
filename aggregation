

function CalculateCoverage(claim, otherClaim) {

  // calculate current payout consumption - What has already be consumed by other claims
  let payoutConsumption = {};

  for (let claim in otherClaim) {
    calculatePayouConsumption(claim, payoutConsumption)
  }

  // calculate lines
  let claimAmount = 0;
  for (let line of claim.lines) {

    // apply each payout to the insure sume
    let lineAmount = line.amountClaim;
    
    let excecss = Math.max(line.excesses.map(x => x.value)
    lineAmount -= excecss;

    // + consumption
    let limit  = Math.min(line.limit.map(x => x.value - x.consumed)
    lineAmount = Math.min(lineAmount, limit)

    let deductible = Math.max(line.deductible.map(x => x.value)
    lineAmount -= deductible;

    // + consumption
    let franchise = Math.max(line.franchise.map(x => x.value));
    lineAmount -= franchise;

    line.lineAmount = lineAmount;

    claimAmount += lineAmount;
  }

  let excecss = Math.max(claim.excesses.map(x => x.value)
  claimAmount -= excecss;

  // + consumption
  let limit  = Math.min(claim.limit.map(x => x.value - x.consumed)
  claimAmount = Math.min(lineAmount, limit)

  let deductible = Math.max(claim.deductible.map(x => x.value)
  claimAmount -= deductible;

  // + consumption
  let franchise = Math.max(claim.franchise.map(x => x.value));
  claimAmount -= franchise;

  return claimAmount;

}