classDiagram
Amount -- UnitEnum
Amount -- UnitDimensionEnum


class Amount {

  string quantity
  UnitEnum unit
  UnitDimensionEnum unitDimension

}

ChainCompositionOr -- RiskChain


Chainable <|-- ChainCompositionOr
class ChainCompositionOr {

  RiskChain[] or

}



class Chainable {
<<abstract>>


}



Relatable <|-- Entity
class Entity {
<<abstract>>


}

InsuranceBenefits -- RiskChain
InsuranceBenefits -- InsurancePayout


class InsuranceBenefits {

  RiskChain riskChain
  InsurancePayout[] payout
  string name
  string description

}

InsurancePayout -- PayoutTypeEnum
InsurancePayout -- Amount
InsurancePayout -- Multiplier
InsurancePayout -- RiskChain


class InsurancePayout {

  PayoutTypeEnum payoutType
  Amount[] amount
  Amount minimalAmount
  Multiplier multipliers
  RiskChain for
  boolean isExtra

}

InsurancePolicy -- InsuranceBenefits


class InsurancePolicy {

  InsuranceBenefits[] benefits

}

Multiplier -- MultiplierTimeEnum
Multiplier -- MultiplierPersonEnum
Multiplier -- MultiplierOccurenceEnum
Multiplier -- MultiplierInsuredObjectEnum


class Multiplier {

  MultiplierTimeEnum time
  MultiplierPersonEnum person
  MultiplierOccurenceEnum occurence
  MultiplierInsuredObjectEnum insuredObject
  string[] other

}

class MultiplierInsuredObjectEnum {
<<enumeration>>
  o perCar
}

class MultiplierOccurenceEnum {
<<enumeration>>
  o perClaim
  o perLine
  o perIncident
}

class MultiplierPersonEnum {
<<enumeration>>
  o perPerson
  o perPassenger
  o perEmployee
  o perLoneTraveler
}

class MultiplierTimeEnum {
<<enumeration>>
  o perMinutes
  o perHour
  o perDay
  o perMonth
  o . . . 3 more values
}

class PayoutTypeEnum {
<<enumeration>>
  o Limit
  o Excess
  o Deductible
  o Franchise
  o . . . 2 more values
}



Entity <|-- Person
class Person {

  boolean isPolicyHolder
  string firstname
  string lastname
  number age

}



class Relatable {
<<abstract>>


}

Relation -- Relatable


class Relation {

  Relatable impacter
  Relatable impactee
  string verb

}

RiskChain -- Chainable
RiskChain -- Entity
RiskChain -- Relation


class RiskChain {

  Chainable[] chain
  Entity[] actors
  Relation[] relations

}



Chainable <|-- Situation
Relatable <|-- Situation
class Situation {

  string event
  string location
  string period

}

class UnitDimensionEnum {
<<enumeration>>
  o Monetary
  o Time
  o Distance
  o Person
}

UnitEnum o-- UnitDistanceEnum
  class UnitDistanceEnum {
<<enumeration>>
  o kilometer
  o miles
}

class UnitEnum {
<<enumeration>>
}

UnitEnum o-- UnitMonetaryEnum
  class UnitMonetaryEnum {
<<enumeration>>
  o AED
  o AFN
  o ALL
  o AMD
  o . . . 177 more values
}

UnitEnum o-- UnitPersonEnum
  class UnitPersonEnum {
<<enumeration>>
  o person
  o passenger
  o driver
  o policyholder
}

UnitEnum o-- UnitTimeEnum
  class UnitTimeEnum {
<<enumeration>>
  o day
  o consecutiveDay
  o night
  o month
  o . . . 1 more values
}

undefined
undefined